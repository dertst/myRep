#include "pch.h"
#include <stdio.h>
#include <stdlib.h>
#define SIZE 20
// Функция быстрой сортировки
void QuickSort(int *numbers, int left, int right)
{
	int value; // разрешающий элемент
	int leftLimit = left; //левая граница
	int rightLimit = right; // правая граница
	value = numbers[left];
	while (left < right) // пока границы не сомкнутся
	{
		while ((numbers[right] >= value) && (left < right))
			right--; // сдвигаем правую границу пока элемент [right] больше [valuee]
		if (left != right) // если границы не сомкнулись
		{
			numbers[left] = numbers[right]; // перемещаем элемент [right] на место разрешающего
			left++; // сдвигаем левую границу вправо
		}
		while ((numbers[left] <= value) && (left < right))
			left++; // сдвигаем левую границу пока элемент [left] меньше [value]
		if (left != right) // если границы не сомкнулись
		{
			numbers[right] = numbers[left]; // перемещаем элемент [left] на место [right]
			right--; // сдвигаем правую границу влево
		}
	}
	numbers[left] = value; // ставим разрешающий элемент на место
	value = left;
	left = leftLimit;
	right = rightLimit;
	if (left < value) // Рекурсивно вызываем сортировку для левой и правой части массива
		QuickSort(numbers, left, value - 1);
	if (right > value)
		QuickSort(numbers, value + 1, right);
}
int main()
{
	int a[SIZE];	// Заполнение массива случайными числами

	for (int i = 0; i < SIZE; i++)
	{
		a[i] = rand() % 201 - 100;	// Вывод элементов массива до сортировки
	}

	for (int i = 0; i < SIZE; i++)
	{
		printf("%4d ", a[i]);
	}
	printf("\n");
	QuickSort(a, 0, SIZE - 1); // вызов функции сортировки
	// Вывод элементов массива после сортировки
	for (int i = 0; i < SIZE; i++)
		printf("%4d ", a[i]);
	printf("\n");
	return 0;
}
